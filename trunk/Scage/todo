В классе Tracer присутствует ряд методов, которые относятся к понятию point, это все выглядит так, как будто две различные
функциональности объединяются в одном классе, и возможно концептуально более правильно вынести их в отдельный класс! По крайней мере
методы с суффиксом Point и методы без этого суффикса используются в разных ситуациях, и в одних и тех же задачах одновременно оба
вида методов не используются! Короче, здесь большая концептуальная дилемма.

Продумать сочетание интерфейсов Trace и HaveStats, возможно, их надо совместить

настройка: путь до папки с картинками (по умолчанию res/img) - будет использоваться рендерером в методах типа
createDisplayList, createAnimation итд

в трейсере запилить новую структуру: мап trace_id -> point. Тогда можно будет не передавать расположение объекта, а все
операции делать по trace_id

Переместить функционал по чтению xml-ек с сообщениями в Message. продумать интернационализацию, хотя бы на русский
язык

ТЗ по рогалику:
1. decisions, возможность создавать очередь из етих decision'ов.
2. анимация, очередь анимаций.

запилить нормальный ScageProperties с обработкой всех-всех ошибок и такими-то значениями по умолчанию

запилить в Netclient'е обработку сообщения quit и проверку на timeout сервера (последнее - в actionSequence, или все в
ActionSequence)

анимацию тоже вынести в Renderer: создать API, позволяющие запилить новую анимацию, проигрывать анимцию.
Туда же органично вписать корректную обработку игровой паузы, чтобы обработка етой самой паузы происходила в
программе единообразно, и пользователю самому заботиться о ней не надо было (пушо сейчас надо)

Инвентарь: группировать импы
Оружие: возможность сохранения "раскладок"