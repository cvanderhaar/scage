Итем, при выстреле, увеличивающий хп ("лечилка"). Имеет ограниченный запас зарядов
То есть нужно реализовать итемы, имеющие ограниченный запас зарядов

Энергия: тратится на выстрелы
Щит: тратится в результате попаданий противника, медленно регенерирует.
Здоровье: тратится, если щит на нуле, восполняется на станциях
Станции: можно пополнить здоровье, указывают направление к ближайшему артефакту.

Реализовать возможность снимать стат с объекта

Модификаторы дающие какой-то постоянный эффект, или возможность кастануть какой-то эффект на цель, длящийся определенное время
(бафы типа): эффекты замедления/ускорения итд
--
команда коллеге: стрелять в тебя, типа бафами. Возможность подчинять себе андроидов противника и делать им
аналогичные настройки, так можно армию баферов таскать за собой.
--
Возможность отдавать приказы лично человеку и в ближайшее пространство

Ловушки, телепортация, отбрасывание противника назад
автоматические стационарные пулеметы

энергетические модификаторы в качестве игровых денег

Может имеет смысл оптимизировать апи, где требуется выбор: выбрать цель, по которой стреляем, выбрать предмет,
который роняем. Мб выборы эти вынести в отдельные decision'ы
--
хотя не..

Различный цвет сообщений в логе

Раз уж у нас один левел на все, интереснее всего будет геймплей с поисками чего-нибудь.
Например, собиранием артефакта
Но я все никак не могу придумать какую-нибудь оригинальную систему прокачки, основанную на моей системе
модификаторов к оружию...((
--
вариант Леши: нечто наподобие сетов. Сочетания итемов могут усиливать или ослаблять какие-то свойства оружия.
Еще вариант: собирать уникальные сочетания из итемов и в специальных местах форджить из них более мощные итемы

Подумать насчет других цветов
--
ScageColorTest запилил - в помощь

Подумать насчет различных типов врагов
Подумать насчет различных типов модификаторов
Подумать насчет сюжета и способа его подачи ("дневники")

Отдавать различные (по форме, не по смыслу) сообщения в ответ на одинаковые действия, для разнообразия

продумать менее громоздкий механизм определения, что объект жив
переписать neighbours в PointTracer

Возможность кастомизировать интерфейс:
строки с игровыми сообщениями: либо вверху, либо внизу
информация о персонаже: либо справа, либо слева
также можно кастомизировать, что там о персонаже пишется

Строки с описанием доступных команд (helpmessages) - как-нибудь отделять цветом
--
сделал зеленым

Класс State: с целью упрощения доступа продумать, чтобы была возможность понять, какое именно поле было инициализированно,
чтобы знать, что возвращать. Сейчас инициализируются все поля значениями по умолчанию (0, пустая строка, нулевой вектор,
false, черный цвет), так что если одно из значений в State сравнялось вот такому умолчальному, понять что именно выводить,
например по getString - ноль или пустую строку? - проблематично..
--
или не ебать мозг, и оставить корректность вызова нужного типа на совести пользователя. Это удобство синтаксиса и только.

Сделать открывание инвентаря и оружия тоже decision'ами done

упрощение синтаксиса: вынести методы из State в Trace

продумать профилирование ScageScreen

тайлы карты должны поддерживать возможность смены цвета (типа брызги крови например итд) done

Методы в трейсере: добавить trace в данную точку (для PointTracer)/в данную координату (для просто Tracer) - подумать о
целесообразности
--
не очень целесообразно, потому что методы getPoint/getCoord могут быть не просто сеттерами для внутренних переменных, а
вычислять точку/координату по какому то сложному алгоритму.
--
с другой стороны учитывая логику методов updateLocation/updatePointLocation - это реально по сути просто геттеры..

Сообщения при выборе цели, при выборе предмета в инвентаре done

В классе Tracer присутствует ряд методов, которые относятся к понятию point, это все выглядит так, как будто две различные
функциональности объединяются в одном классе, и возможно концептуально более правильно вынести их в отдельный класс! По крайней мере
методы с суффиксом Point и методы без этого суффикса используются в разных ситуациях, и в одних и тех же задачах одновременно оба
вида методов не используются! Короче, здесь большая концептуальная дилемма.
--
выделил отдельный класс PointTracer, отнаследовав его от Tracer

Продумать сочетание интерфейсов Trace и HaveStats, возможно, их надо совместить

настройка: путь до папки с картинками (по умолчанию res/img) - будет использоваться рендерером в методах типа
createDisplayList, createAnimation итд

в трейсере запилить новую структуру: мап trace_id -> point. Тогда можно будет не передавать расположение объекта, а все
операции делать по trace_id

Переместить функционал по чтению xml-ек с сообщениями в Message. продумать интернационализацию, хотя бы на русский
язык

ТЗ по рогалику:
1. decisions, возможность создавать очередь из етих decision'ов.
2. анимация, очередь анимаций.

запилить нормальный ScageProperties с обработкой всех-всех ошибок и такими-то значениями по умолчанию

запилить в Netclient'е обработку сообщения quit и проверку на timeout сервера (последнее - в actionSequence, или все в
ActionSequence)

анимацию тоже вынести в Renderer: создать API, позволяющие запилить новую анимацию, проигрывать анимцию.
Туда же органично вписать корректную обработку игровой паузы, чтобы обработка етой самой паузы происходила в
программе единообразно, и пользователю самому заботиться о ней не надо было (пушо сейчас надо)

Инвентарь: группировать импы
Оружие: возможность сохранения "раскладок"